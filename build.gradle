/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'application'
    id 'java'
    id 'maven-publish'
    id 'antlr'
}

application {
    mainClass = 'com.kanatti.jackson.Test2'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.hibernate:hibernate-validator:5.1.3.Final'
    implementation 'javax.el:javax.el-api:2.2.4'
    implementation 'org.glassfish.web:javax.el:2.2.4'

    antlr "org.antlr:antlr4:4.7.1"

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'

    implementation 'io.netty:netty-all:4.1.115.Final'

    testImplementation 'junit:junit:4.11'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}

group = 'com.kanatti'
version = '1.0-SNAPSHOT'
description = 'justjava'
java.sourceCompatibility = JavaVersion.VERSION_1_8

sourceSets.main.antlr.srcDirs = ['src/main/antlr']


publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

java {
    sourceSets {
        main {
            annotationProcessorPath = configurations.annotationProcessor
        }
    }
}


test {
    testLogging {
        showStandardStreams = true
        events = ["failed"]

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} passed, ${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped)" as Object
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Define a custom task to run a specific main class
task runMain(type: JavaExec) {
    group = 'Execution'
    description = 'Runs the specified main class'

    if (project.hasProperty('mainClass')) {
        main = project.getProperty('mainClass')
        classpath = sourceSets.main.runtimeClasspath
    }
}